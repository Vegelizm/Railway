import aiosqlite
import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
TOKEN = os.getenv("7887415022:AAHr5MDC83t1Yw6qqil-DWsmaUlqHgJSQcs")

# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
main_menu.add(KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"))

# üìå –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
read_button = ReplyKeyboardMarkup(resize_keyboard=True)
read_button.add(KeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"))

repeat_menu = ReplyKeyboardMarkup(resize_keyboard=True)
repeat_menu.add(KeyboardButton("–ü–æ–≤—Ç–æ—Ä—è—Ç—å"), KeyboardButton("–ú–µ–Ω—é"))

# üìå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "reminders.db"

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
async def setup_database():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message TEXT,
                remind_time TEXT,
                read_status INTEGER DEFAULT 0,
                repeat INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'", reply_markup=main_menu)

# üìå –ù–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.text == "üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def ask_reminder_text(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

# üìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.message()
async def set_reminder(message: types.Message):
    async with aiosqlite.connect(DB_FILE) as db:
        user_id = message.from_user.id
        text = message.text
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM):")
        remind_time = await bot.wait_for_message()
        try:
            remind_time = datetime.strptime(remind_time.text, "%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
            return

        await db.execute("INSERT INTO reminders (user_id, message, remind_time) VALUES (?, ?, ?)",
                         (user_id, text, remind_time.strftime("%Y-%m-%d %H:%M")))
        await db.commit()

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time}", reply_markup=main_menu)

# üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT id, user_id, message, remind_time, repeat FROM reminders WHERE remind_time <= ? AND read_status = 0",
                              (datetime.now().strftime("%Y-%m-%d %H:%M"),)) as cursor:
            reminders = await cursor.fetchall()
            for reminder_id, user_id, message_text, remind_time, repeat in reminders:
                await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message_text}", reply_markup=read_button)
                if repeat == 0:
                    await db.execute("UPDATE reminders SET read_status = 1 WHERE id = ?", (reminder_id,))
                else:
                    new_time = datetime.strptime(remind_time, "%Y-%m-%d %H:%M")
                    new_time = new_time.replace(day=new_time.day + 1)
                    await db.execute("UPDATE reminders SET remind_time = ?, read_status = 0 WHERE id = ?",
                                     (new_time.strftime("%Y-%m-%d %H:%M"), reminder_id))
                await db.commit()

# üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
async def scheduler():
    while True:
        await send_reminders()
        await asyncio.sleep(60)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await setup_database()
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
