import aiosqlite
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import logging

# üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîë –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# üìå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
main_menu.add(KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"))

# üìå –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
read_button = ReplyKeyboardMarkup(resize_keyboard=True)
read_button.add(KeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"))

repeat_menu = ReplyKeyboardMarkup(resize_keyboard=True)
repeat_menu.add(KeyboardButton("–ü–æ–≤—Ç–æ—Ä—è—Ç—å"), KeyboardButton("–ú–µ–Ω—é"))

# üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# üìå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "reminders.db"

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
async def setup_database():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(""" 
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message TEXT,
                remind_time TEXT,
                read_status INTEGER DEFAULT 0,
                repeat INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'", reply_markup=main_menu)

# üìå –ù–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.text == "üìå –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def ask_reminder_text(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

# üìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(lambda message: message.from_user.id in user_data and "text" not in user_data[message.from_user.id])
async def set_reminder_text(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["text"] = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–§–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM):")

@dp.message(lambda message: message.from_user.id in user_data and "text" in user_data[message.from_user.id])
async def set_reminder_time(message: types.Message):
    user_id = message.from_user.id

    try:
        remind_time = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
        return

    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("INSERT INTO reminders (user_id, message, remind_time) VALUES (?, ?, ?)",
                         (user_id, user_data[user_id]["text"], remind_time.strftime("%Y-%m-%d %H:%M")))
        await db.commit()

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{user_data[user_id]['text']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time}", reply_markup=main_menu)
    del user_data[user_id]

# üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT id, user_id, message, remind_time, repeat FROM reminders WHERE remind_time <= ? AND read_status = 0",
                              (datetime.now().strftime("%Y-%m-%d %H:%M"),)) as cursor:
            reminders = await cursor.fetchall()

            for reminder_id, user_id, message_text, remind_time, repeat in reminders:
                await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message_text}", reply_markup=read_button, parse_mode=ParseMode.HTML)

                if repeat == 0:
                    await db.execute("UPDATE reminders SET read_status = 1 WHERE id = ?", (reminder_id,))
                else:
                    new_time = datetime.strptime(remind_time, "%Y-%m-%d %H:%M")  # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    new_time = new_time.replace(day=new_time.day + 1)  # –°–º–µ—â–∞–µ–º –Ω–∞ 1 –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
                    await db.execute("UPDATE reminders SET remind_time = ?, read_status = 0 WHERE id = ?",
                                     (new_time.strftime("%Y-%m-%d %H:%M"), reminder_id))

                await db.commit()

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
@dp.message(lambda message: message.text == "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ")
async def mark_as_read(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE reminders SET read_status = 1 WHERE user_id = ?", (user_id,))
        await db.commit()

    await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=repeat_menu)

# üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(lambda message: message.text == "–ü–æ–≤—Ç–æ—Ä—è—Ç—å")
async def set_repeat_reminder(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE reminders SET repeat = 1 WHERE user_id = ?", (user_id,))
        await db.commit()

    await message.answer("üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!", reply_markup=main_menu)

# üìå –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
@dp.message(lambda message: message.text == "–ú–µ–Ω—é")
async def return_to_menu(message: types.Message):
    await message.answer("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

# üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
@dp.message(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏")
async def manage_reminders(message: types.Message):
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT id, message, remind_time, repeat FROM reminders WHERE user_id = ?", (message.from_user.id,)) as cursor:
            reminders = await cursor.fetchall()
            if not reminders:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                return

            for _, message_text, remind_time, repeat in reminders:
                repeat_text = "üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è" if repeat else "‚ùå –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"
                await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message_text}\n–í—Ä–µ–º—è: {remind_time}\n{repeat_text}")

# üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
async def scheduler():
    while True:
        await send_reminders()
        await asyncio.sleep(60)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await setup_database()
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
